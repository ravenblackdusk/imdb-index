/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.TitleBasicsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TitleBasics extends TableImpl<TitleBasicsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TITLE_BASICS</code>
     */
    public static final TitleBasics TITLE_BASICS = new TitleBasics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitleBasicsRecord> getRecordType() {
        return TitleBasicsRecord.class;
    }

    /**
     * The column <code>PUBLIC.TITLE_BASICS.TCONST</code>.
     */
    public final TableField<TitleBasicsRecord, String> TCONST = createField(DSL.name("TCONST"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.TITLE_TYPE</code>.
     */
    public final TableField<TitleBasicsRecord, String> TITLE_TYPE = createField(DSL.name("TITLE_TYPE"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.PRIMARY_TITLE</code>.
     */
    public final TableField<TitleBasicsRecord, String> PRIMARY_TITLE = createField(DSL.name("PRIMARY_TITLE"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.ORIGINAL_TITLE</code>.
     */
    public final TableField<TitleBasicsRecord, String> ORIGINAL_TITLE = createField(DSL.name("ORIGINAL_TITLE"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.IS_ADULT</code>.
     */
    public final TableField<TitleBasicsRecord, Boolean> IS_ADULT = createField(DSL.name("IS_ADULT"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.START_YEAR</code>.
     */
    public final TableField<TitleBasicsRecord, String> START_YEAR = createField(DSL.name("START_YEAR"), SQLDataType.CHAR(4), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.END_YEAR</code>.
     */
    public final TableField<TitleBasicsRecord, String> END_YEAR = createField(DSL.name("END_YEAR"), SQLDataType.CHAR(4), this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.RUNTIME_MINUTES</code>.
     */
    public final TableField<TitleBasicsRecord, Integer> RUNTIME_MINUTES = createField(DSL.name("RUNTIME_MINUTES"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.TITLE_BASICS.GENRES</code>.
     */
    public final TableField<TitleBasicsRecord, String> GENRES = createField(DSL.name("GENRES"), SQLDataType.VARCHAR(1000000000), this, "");

    private TitleBasics(Name alias, Table<TitleBasicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TitleBasics(Name alias, Table<TitleBasicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_BASICS</code> table reference
     */
    public TitleBasics(String alias) {
        this(DSL.name(alias), TITLE_BASICS);
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_BASICS</code> table reference
     */
    public TitleBasics(Name alias) {
        this(alias, TITLE_BASICS);
    }

    /**
     * Create a <code>PUBLIC.TITLE_BASICS</code> table reference
     */
    public TitleBasics() {
        this(DSL.name("TITLE_BASICS"), null);
    }

    public <O extends Record> TitleBasics(Table<O> child, ForeignKey<O, TitleBasicsRecord> key) {
        super(child, key, TITLE_BASICS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TitleBasicsRecord> getPrimaryKey() {
        return Keys.TITLE_BASICS_PK;
    }

    @Override
    public TitleBasics as(String alias) {
        return new TitleBasics(DSL.name(alias), this);
    }

    @Override
    public TitleBasics as(Name alias) {
        return new TitleBasics(alias, this);
    }

    @Override
    public TitleBasics as(Table<?> alias) {
        return new TitleBasics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleBasics rename(String name) {
        return new TitleBasics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleBasics rename(Name name) {
        return new TitleBasics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleBasics rename(Table<?> name) {
        return new TitleBasics(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, Boolean, String, String, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
