/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.TitlePrincipalsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TitlePrincipals extends TableImpl<TitlePrincipalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TITLE_PRINCIPALS</code>
     */
    public static final TitlePrincipals TITLE_PRINCIPALS = new TitlePrincipals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitlePrincipalsRecord> getRecordType() {
        return TitlePrincipalsRecord.class;
    }

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.TCONST</code>.
     */
    public final TableField<TitlePrincipalsRecord, String> TCONST = createField(DSL.name("TCONST"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.ORDERING</code>.
     */
    public final TableField<TitlePrincipalsRecord, Integer> ORDERING = createField(DSL.name("ORDERING"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.NCONST</code>.
     */
    public final TableField<TitlePrincipalsRecord, String> NCONST = createField(DSL.name("NCONST"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.CATEGORY</code>.
     */
    public final TableField<TitlePrincipalsRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.JOB</code>.
     */
    public final TableField<TitlePrincipalsRecord, String> JOB = createField(DSL.name("JOB"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>PUBLIC.TITLE_PRINCIPALS.CHARACTERS</code>.
     */
    public final TableField<TitlePrincipalsRecord, String> CHARACTERS = createField(DSL.name("CHARACTERS"), SQLDataType.VARCHAR(1000000000), this, "");

    private TitlePrincipals(Name alias, Table<TitlePrincipalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TitlePrincipals(Name alias, Table<TitlePrincipalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_PRINCIPALS</code> table reference
     */
    public TitlePrincipals(String alias) {
        this(DSL.name(alias), TITLE_PRINCIPALS);
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_PRINCIPALS</code> table reference
     */
    public TitlePrincipals(Name alias) {
        this(alias, TITLE_PRINCIPALS);
    }

    /**
     * Create a <code>PUBLIC.TITLE_PRINCIPALS</code> table reference
     */
    public TitlePrincipals() {
        this(DSL.name("TITLE_PRINCIPALS"), null);
    }

    public <O extends Record> TitlePrincipals(Table<O> child, ForeignKey<O, TitlePrincipalsRecord> key) {
        super(child, key, TITLE_PRINCIPALS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TitlePrincipalsRecord> getPrimaryKey() {
        return Keys.TITLE_PRINCIPALS_PK;
    }

    @Override
    public List<ForeignKey<TitlePrincipalsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_E, Keys.TITLE_PRINCIPALS_NAME_BASICS_FK);
    }

    private transient TitleBasics _titleBasics;
    private transient NameBasics _nameBasics;

    /**
     * Get the implicit join path to the <code>PUBLIC.TITLE_BASICS</code> table.
     */
    public TitleBasics titleBasics() {
        if (_titleBasics == null)
            _titleBasics = new TitleBasics(this, Keys.CONSTRAINT_E);

        return _titleBasics;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.NAME_BASICS</code> table.
     */
    public NameBasics nameBasics() {
        if (_nameBasics == null)
            _nameBasics = new NameBasics(this, Keys.TITLE_PRINCIPALS_NAME_BASICS_FK);

        return _nameBasics;
    }

    @Override
    public TitlePrincipals as(String alias) {
        return new TitlePrincipals(DSL.name(alias), this);
    }

    @Override
    public TitlePrincipals as(Name alias) {
        return new TitlePrincipals(alias, this);
    }

    @Override
    public TitlePrincipals as(Table<?> alias) {
        return new TitlePrincipals(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TitlePrincipals rename(String name) {
        return new TitlePrincipals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitlePrincipals rename(Name name) {
        return new TitlePrincipals(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitlePrincipals rename(Table<?> name) {
        return new TitlePrincipals(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
