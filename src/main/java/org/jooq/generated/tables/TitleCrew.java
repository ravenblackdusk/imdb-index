/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.TitleCrewRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TitleCrew extends TableImpl<TitleCrewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TITLE_CREW</code>
     */
    public static final TitleCrew TITLE_CREW = new TitleCrew();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitleCrewRecord> getRecordType() {
        return TitleCrewRecord.class;
    }

    /**
     * The column <code>PUBLIC.TITLE_CREW.TCONST</code>.
     */
    public final TableField<TitleCrewRecord, String> TCONST = createField(DSL.name("TCONST"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_CREW.DIRECTORS</code>.
     */
    public final TableField<TitleCrewRecord, String> DIRECTORS = createField(DSL.name("DIRECTORS"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TITLE_CREW.WRITERS</code>.
     */
    public final TableField<TitleCrewRecord, String> WRITERS = createField(DSL.name("WRITERS"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    private TitleCrew(Name alias, Table<TitleCrewRecord> aliased) {
        this(alias, aliased, null);
    }

    private TitleCrew(Name alias, Table<TitleCrewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_CREW</code> table reference
     */
    public TitleCrew(String alias) {
        this(DSL.name(alias), TITLE_CREW);
    }

    /**
     * Create an aliased <code>PUBLIC.TITLE_CREW</code> table reference
     */
    public TitleCrew(Name alias) {
        this(alias, TITLE_CREW);
    }

    /**
     * Create a <code>PUBLIC.TITLE_CREW</code> table reference
     */
    public TitleCrew() {
        this(DSL.name("TITLE_CREW"), null);
    }

    public <O extends Record> TitleCrew(Table<O> child, ForeignKey<O, TitleCrewRecord> key) {
        super(child, key, TITLE_CREW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TitleCrewRecord> getPrimaryKey() {
        return Keys.TITLE_CREW_PK;
    }

    @Override
    public List<ForeignKey<TitleCrewRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_B4);
    }

    private transient TitleBasics _titleBasics;

    /**
     * Get the implicit join path to the <code>PUBLIC.TITLE_BASICS</code> table.
     */
    public TitleBasics titleBasics() {
        if (_titleBasics == null)
            _titleBasics = new TitleBasics(this, Keys.CONSTRAINT_B4);

        return _titleBasics;
    }

    @Override
    public TitleCrew as(String alias) {
        return new TitleCrew(DSL.name(alias), this);
    }

    @Override
    public TitleCrew as(Name alias) {
        return new TitleCrew(alias, this);
    }

    @Override
    public TitleCrew as(Table<?> alias) {
        return new TitleCrew(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleCrew rename(String name) {
        return new TitleCrew(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleCrew rename(Name name) {
        return new TitleCrew(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleCrew rename(Table<?> name) {
        return new TitleCrew(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
